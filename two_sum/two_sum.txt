题目：
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

思路：
题目意思很简单，从数组中找出两个不同的数，使得他们的和等于target。思路也不难，最简单的方法，我们可以双重循环，第一重循环枚举数组中的数，第二重循环验证target－x是不是存在，时间复杂度为O(n^2).
当然我们不能满足于此，能不能更快呢？答案当然是可以的，第二重循环中我们可以使用map，做到 log(n)的查找和插入的复杂度，典型的拿空间换时间的例子。

知识点整理：
c++：
c++中map与unordered_map的区别
头文件

    map: #include < map >
    unordered_map: #include < unordered_map >

内部实现机理

    map： map内部实现了一个红黑树，该结构具有自动排序的功能，因此map内部的所有元素都是有序的，红黑树的每一个节点都代表着map的一个元素，因此，对于map进行的查找，删除，添加等一系列的操作都相当于是对红黑树进行这样的操作，故红黑树的效率决定了map的效率。
    unordered_map: unordered_map内部实现了一个哈希表，因此其元素的排列顺序是杂乱的，无序的

优缺点以及适用处

    map
        优点：
            有序性，这是map结构最大的优点，其元素的有序性在很多应用中都会简化很多的操作
            红黑树，内部实现一个红黑书使得map的很多操作在lgn

        的时间复杂度下就可以实现，因此效率非常的高
    缺点：
        空间占用率高，因为map内部实现了红黑树，虽然提高了运行效率，但是因为每一个节点都需要额外保存父节点，孩子节点以及红/黑性质，使得每一个节点都占用大量的空间
    适用处，对于那些有顺序要求的问题，用map会更高效一些

unordered_map

    优点：
        因为内部实现了哈希表，因此其查找速度非常的快
    缺点：
        哈希表的建立比较耗费时间
    适用处，对于查找问题，unordered_map会更加高效一些，因此遇到查找问题，常会考虑一下用unordered_map

vector初始化的几种方法：
（1）不带参数的构造函数初始化

//初始化一个size为0的vector
vector<int> abc;

    1
    2

（2）带参数的构造函数初始化

//初始化size,但每个元素值为默认值
vector<int> abc(10);    //初始化了10个默认值为0的元素
//初始化size,并且设置初始值
vector<int> cde(10，1);    //初始化了10个值为1的元素

    1
    2
    3
    4

（3）通过数组地址初始化

int a[5] = {1,2,3,4,5};
//通过数组a的地址初始化，注意地址是从0到5（左闭右开区间）
vector<int> b(a, a+5);

    1
    2
    3

（4）通过同类型的vector初始化

vector<int> a(5,1);
//通过a初始化
vector<int> b(a);

    1
    2
    3

（5）通过insert初始化

//insert初始化方式将同类型的迭代器对应的始末区间（左闭右开区间）内的值插入到vector中
vector<int> a(6,6);
vecot<int> b;
//将a[0]~a[2]插入到b中，b.size()由0变为3
b.insert(b.begin(), a.begin(), a.begin() + 3);

    1
    2
    3
    4
    5

insert也可通过数组地址区间实现插入

int a[6] = {6,6,6,6,6,6};
vector<int> b;
//将a的所有元素插入到b中
b.insert(b.begin(), a, a+7);

    1
    2
    3
    4

此外，insert还可以插入m个值为n的元素

//在b开始位置处插入6个6
b.insert(b.begin(), 6, 6);

    1
    2

（6）通过copy函数赋值

vector<int> a(5,1);
int a1[5] = {2,2,2,2,2};
vector<int> b(10);

/*将a中元素全部拷贝到b开始的位置中,注意拷贝的区间为a.begin() ~ a.end()的左闭右开的区间*/
copy(a.begin(), a.end(), b.begin());

//拷贝区间也可以是数组地址构成的区间
copy(a1, a1+5, b.begin() + 5);
